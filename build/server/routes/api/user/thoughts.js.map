{"version":3,"file":"thoughts.js","sources":["../../../../../server/routes/api/user/thoughts.ts"],"sourcesContent":["import { Router, Request, Response } from \"express\";\nimport Thought, { IThought } from \"../../../../db/models/thoughts\";\nimport { Types } from \"mongoose\";\nimport { withAuth } from \"../authMiddleware\";\nimport User, { IUser } from \"../../../../db/models/user\";\nimport Reaction from \"../../../../db/models/reactions\";\n\nconst router: Router = Router();\n\nrouter.get(\"/getAll\", async (_req: Request, res: Response) => {\n  const allThoughts = await Thought.find()\n    .select(\"-__v\")\n    .populate(\"reactions\", \"-__v\");\n\n  return res.json({\n    success: true,\n    message: \"All thoughts retrieved\",\n    thoughts: allThoughts,\n  });\n});\n\nrouter.get(\"/:id\", async (req: Request, res: Response) => {\n  if (Types.ObjectId.isValid(req.params.id) !== true) {\n    return res.json({\n      success: false,\n      message: \"Invalid thought id\",\n    });\n  }\n\n  const thought = await Thought.findById(req.params.id).populate(\n    \"reactions\",\n    \"-__v\"\n  );\n  if (!thought) {\n    return res.json({\n      success: false,\n      message: \"Thought not found\",\n    });\n  }\n\n  return res.json({\n    success: true,\n    message: \"Thought retrieved\",\n    thought: thought.toJSON(),\n  });\n});\n\nrouter.post(\"/\", withAuth, async (req: Request, res: Response) => {\n  const { thoughtText } = req.body;\n\n  if (!thoughtText) {\n    return res.json({\n      success: false,\n      message: \"thoughtText for post is required\",\n    });\n  }\n\n  const newThought = await Thought.create({\n    thoughtText,\n    username: req.session.user!.username,\n  });\n\n  const updatedUser: IUser | null = await User.findOneAndUpdate(\n    { _id: req.session.user!._id },\n    { $push: { thoughts: newThought._id } },\n    { returnDocument: \"after\", getters: true }\n  );\n\n  if (!updatedUser) {\n    return res.json({\n      success: false,\n      message: \"Unable to update user, please try again\",\n    });\n  }\n\n  req.session.user = updatedUser;\n\n  const userWithFriends = await updatedUser.populateFriends();\n  const userWithFriendsAndThoughts = await userWithFriends.populateThoughts();\n\n  return res.json({\n    success: true,\n    message: \"Thought created\",\n    thought: userWithFriendsAndThoughts,\n  });\n});\n\nrouter.delete(\"/:id\", withAuth, async (req: Request, res: Response) => {\n  if (Types.ObjectId.isValid(req.params.id) !== true) {\n    return res.json({\n      success: false,\n      message: \"Invalid thought id\",\n    });\n  }\n\n  const thought = await Thought.findById(req.params.id);\n  if (!thought) {\n    return res.json({\n      success: false,\n      message: \"Thought not found\",\n    });\n  }\n\n  if (thought.username !== req.session.user!.username) {\n    return res.json({\n      success: false,\n      message: \"You can only delete your own thoughts\",\n    });\n  }\n\n  await thought.deleteOne();\n\n  const updatedUser: IUser | null = await User.findOneAndUpdate(\n    { _id: req.session.user!._id },\n    { $pull: { thoughts: thought._id } },\n    { returnDocument: \"after\", getters: true }\n  );\n\n  if (!updatedUser) {\n    return res.json({\n      success: false,\n      message: \"Unable to update user, please try again\",\n    });\n  }\n\n  req.session.user = updatedUser;\n\n  const userWithFriends = await updatedUser.populateFriends();\n  const userWithFriendsAndThoughts = await userWithFriends.populateThoughts();\n\n  return res.json({\n    success: true,\n    message: \"Thought deleted\",\n    thought: userWithFriendsAndThoughts,\n  });\n});\n\nrouter.put(\"/:id\", withAuth, async (req: Request, res: Response) => {\n  if (Types.ObjectId.isValid(req.params.id) !== true) {\n    return res.json({\n      success: false,\n      message: \"Invalid thought id\",\n    });\n  }\n  const thought = await Thought.findById(req.params.id);\n  if (!thought) {\n    return res.json({\n      success: false,\n      message: \"Thought not found\",\n    });\n  }\n  if (thought.username !== req.session.user!.username) {\n    return res.json({\n      success: false,\n      message: \"You can only update your own thoughts\",\n    });\n  }\n  const { thoughtText, createdAt } = req.body;\n  if (!thoughtText && !createdAt) {\n    return res.json({\n      success: false,\n      message: \"thoughtText or createdAt required for updating\",\n    });\n  }\n  if (createdAt && isNaN(Date.parse(createdAt))) {\n    return res.json({\n      success: false,\n      message: \"Invalid createdAt date\",\n    });\n  }\n  let updatedFields: {\n    thoughtText?: string;\n    username?: string;\n    createdAt?: string | number | Date;\n  } = {};\n  thoughtText ? (updatedFields.thoughtText = thoughtText) : null;\n  createdAt ? (updatedFields.createdAt = createdAt) : null;\n  await thought.updateOne(updatedFields);\n  const userNewData: IUser | null = await User.findById(req.session.user!._id);\n  if (!userNewData) {\n    return res.json({\n      success: false,\n      message: \"Unable to get new user info\",\n    });\n  }\n  req.session.user = userNewData;\n  const userWithFriends = await userNewData.populateFriends();\n  const userWithFriendsAndThoughts = await userWithFriends.populateThoughts();\n  return res.json({\n    success: true,\n    message: \"Thought updated\",\n    user: userWithFriendsAndThoughts.toJSON(),\n  });\n});\n\nrouter.post(\"/:id/reaction\", withAuth, async (req: Request, res: Response) => {\n  if (Types.ObjectId.isValid(req.params.id) !== true) {\n    return res.json({\n      success: false,\n      message: \"Invalid thought id\",\n    });\n  }\n\n  const thought: IThought | null = await Thought.findById(req.params.id);\n  if (!thought) {\n    return res.json({\n      success: false,\n      message: \"Thought not found\",\n    });\n  }\n  const { reactionBody } = req.body;\n  const { _id: userId, username } = req.session.user!;\n  if (!reactionBody) {\n    return res.json({\n      success: false,\n      message: \"reactionBody required for reaction post\",\n    });\n  }\n\n  const { _id: reactionId } = await Reaction.create({\n    reactionBody,\n    username,\n  });\n\n  thought.reactions.push(reactionId);\n  await thought.save();\n  const updatedThought = await Thought.findById(req.params.id);\n\n  if (!updatedThought) {\n    return res.json({\n      success: false,\n      message: \"Unable to get thought after updating reactions\",\n    });\n  }\n\n  const thoughtWithReactions = await updatedThought.populate(\n    \"reactions\",\n    \"-__v\"\n  );\n\n  return res.json({\n    success: true,\n    message: \"Reaction added\",\n    thought: thoughtWithReactions.toJSON(),\n  });\n});\n\nrouter.delete(\n  \"/:id/reaction\",\n  withAuth,\n  async (req: Request, res: Response) => {\n    const { reactionId } = req.body;\n\n    if (!reactionId) {\n      return res.json({\n        success: false,\n        message: \"reactionId required for reaction deletion\",\n      });\n    }\n\n    if (Types.ObjectId.isValid(reactionId) !== true) {\n      return res.json({\n        success: false,\n        message: \"Invalid reactionId\",\n      });\n    }\n\n    const thought: IThought | null = await Thought.findById(req.params.id);\n\n    if (thought?.reactions.includes(reactionId) !== true) {\n      return res.json({\n        success: false,\n        message: \"Reaction not found on thought\",\n      });\n    }\n\n    await Reaction.findByIdAndDelete(reactionId);\n\n    thought.reactions = thought.reactions.filter(\n      (reaction) => reaction !== reactionId\n    );\n\n    let currentReactions = [];\n    for (let i = 0; i < thought.reactions.length; i++) {\n      const reactionId = thought.reactions[i];\n      const reaction = await Reaction.findById(reactionId);\n      if (reaction) {\n        currentReactions.push(reactionId);\n      }\n    }\n    thought.reactions = currentReactions;\n    await thought.save();\n\n    res.json({\n      success: true,\n      message: \"Reaction deleted\",\n      thought: (await thought.populate(\"reactions\", \"-__v\")).toJSON(),\n    });\n  }\n);\n\nexport default router;\n"],"names":[],"mappings":"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"}