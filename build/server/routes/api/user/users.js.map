{"version":3,"file":"users.js","sources":["../../../../../server/routes/api/user/users.ts"],"sourcesContent":["import { Router, Request, Response } from \"express\";\nimport User, { IUser } from \"../../../../db/models/user\";\n\nconst router: Router = Router();\n\nrouter.put(\"/\", async (req: Request, res: Response) => {\n  const {\n    username,\n    password,\n    email,\n  }: { username: string; password: string; email: string } = req.body;\n\n  if (!username && !password && !email) {\n    return res.json({\n      success: false,\n      message: \"Username, password, or email required to update user\",\n    });\n  }\n\n  const userExistsWithUsername = await User.exists({ username });\n  if (userExistsWithUsername) {\n    let message =\n      username == req.session.user?.username\n        ? `${username} is your current username`\n        : \"Username already exists\";\n    return res.json({\n      success: false,\n      message,\n    });\n  }\n\n  const userExistsWithEmail = await User.exists({ email });\n  if (userExistsWithEmail) {\n    let message =\n      email == req.session.user?.email\n        ? `${email} is your current email`\n        : \"Email already exists\";\n    return res.json({\n      success: false,\n      message,\n    });\n  }\n\n  const userid = req.session.user?._id;\n\n  if (!userid) {\n    return res.json({\n      success: false,\n      message: \"User not logged in\",\n    });\n  }\n\n  //Find user to update\n  const foundUser: IUser | null = await User.findById(userid);\n  if (!foundUser) {\n    return res.json({\n      success: false,\n      message: \"User not found\",\n    });\n  }\n\n  //Create the object to update the user\n  let setQuery: { username?: string; password?: string; email?: string } = {};\n  username ? (setQuery.username = username) : null;\n  password ? (setQuery.password = password) : null;\n  email ? (setQuery.email = email) : null;\n\n  //Update the user\n  const updatedUser = await foundUser.set(setQuery).save();\n  if (!updatedUser) {\n    return res.json({\n      success: false,\n      message: \"User unable to be updated\",\n    });\n  }\n\n  //Readd Friends\n  const userWithFriends = await updatedUser.populateFriends();\n  const userWithFriendsAndThoughts = await userWithFriends.populateThoughts();\n\n  //Get JSON (No pass)\n  const jsonUser = userWithFriendsAndThoughts.toJSON();\n\n  req.session.user = jsonUser;\n\n  return res.json({\n    success: true,\n    message: \"User updated\",\n    user: jsonUser,\n  });\n});\n\nrouter.get(\"/getAll\", async (req: Request, res: Response) => {\n  const allUsers = await User.find();\n\n  let allUsersWithFriends = await Promise.all(\n    allUsers.map(async (user) => {\n      const userWithFriends = await user.populateFriends();\n      const userWithFriendsAndThoughts =\n        await userWithFriends.populateThoughts();\n      return userWithFriendsAndThoughts;\n    })\n  );\n\n  let jsonAllUsers = allUsersWithFriends.map((user) => {\n    return user.toJSON();\n  });\n\n  return res.json({\n    success: true,\n    message: \"All users retrieved\",\n    users: jsonAllUsers,\n  });\n});\n\nrouter.get(\"/:id?\", async (req: Request, res: Response) => {\n  const user: IUser | null = await User.findById(\n    req.params.id || req.session.user?._id\n  );\n  if (!user) {\n    return res.json({\n      success: false,\n      message: \"User not found\",\n    });\n  }\n\n  const userWithFriends = await user.populateFriends();\n  const userWithFriendsAndThoughts = await userWithFriends.populateThoughts();\n  const jsonUser = userWithFriendsAndThoughts.toJSON();\n  return res.json({\n    success: true,\n    message: \"User retrieved\",\n    user: jsonUser,\n  });\n});\n\nrouter.delete(\"/\", async (req: Request, res: Response) => {\n  const userid = req.session.user?._id;\n  if (!userid) {\n    return res.json({\n      success: false,\n      message: \"User not logged in\",\n    });\n  }\n\n  const foundUser = await User.findById(userid);\n\n  if (!foundUser) {\n    return res.json({\n      success: false,\n      message: \"User not found\",\n    });\n  }\n\n  const deletedUser = await foundUser.deleteOne();\n\n  if (!deletedUser) {\n    return res.json({\n      success: false,\n      message: \"User unable to be deleted? Please try again\",\n    });\n  }\n\n  return res.json({\n    success: true,\n    message: \"User & all associated data deleted\",\n  });\n});\n\nexport default router;\n"],"names":[],"mappings":";;;AAGA,MAAM,MAAM,GAAW,MAAM,GAAG;AAEhC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,GAAY,EAAE,GAAa,KAAI;IACpD,MAAM,EACJ,QAAQ,EACR,QAAQ,EACR,KAAK,GACN,GAA0D,GAAG,CAAC,IAAI,CAAC;IAEpE,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,IAAI,CAAC,KAAK,EAAE;QACpC,OAAO,GAAG,CAAC,IAAI,CAAC;AACd,YAAA,OAAO,EAAE,KAAK;AACd,YAAA,OAAO,EAAE,sDAAsD;AAChE,SAAA,CAAC,CAAC;KACJ;IAED,MAAM,sBAAsB,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC;IAC/D,IAAI,sBAAsB,EAAE;QAC1B,IAAI,OAAO,GACT,QAAQ,IAAI,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,QAAQ;cAClC,CAAG,EAAA,QAAQ,CAA2B,yBAAA,CAAA;cACtC,yBAAyB,CAAC;QAChC,OAAO,GAAG,CAAC,IAAI,CAAC;AACd,YAAA,OAAO,EAAE,KAAK;YACd,OAAO;AACR,SAAA,CAAC,CAAC;KACJ;IAED,MAAM,mBAAmB,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;IACzD,IAAI,mBAAmB,EAAE;QACvB,IAAI,OAAO,GACT,KAAK,IAAI,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK;cAC5B,CAAG,EAAA,KAAK,CAAwB,sBAAA,CAAA;cAChC,sBAAsB,CAAC;QAC7B,OAAO,GAAG,CAAC,IAAI,CAAC;AACd,YAAA,OAAO,EAAE,KAAK;YACd,OAAO;AACR,SAAA,CAAC,CAAC;KACJ;IAED,MAAM,MAAM,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;IAErC,IAAI,CAAC,MAAM,EAAE;QACX,OAAO,GAAG,CAAC,IAAI,CAAC;AACd,YAAA,OAAO,EAAE,KAAK;AACd,YAAA,OAAO,EAAE,oBAAoB;AAC9B,SAAA,CAAC,CAAC;KACJ;;IAGD,MAAM,SAAS,GAAiB,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IAC5D,IAAI,CAAC,SAAS,EAAE;QACd,OAAO,GAAG,CAAC,IAAI,CAAC;AACd,YAAA,OAAO,EAAE,KAAK;AACd,YAAA,OAAO,EAAE,gBAAgB;AAC1B,SAAA,CAAC,CAAC;KACJ;;IAGD,IAAI,QAAQ,GAA6D,EAAE,CAAC;AAC5E,IAAA,QAAQ,IAAI,QAAQ,CAAC,QAAQ,GAAG,QAAQ,IAAI,IAAI,CAAC;AACjD,IAAA,QAAQ,IAAI,QAAQ,CAAC,QAAQ,GAAG,QAAQ,IAAI,IAAI,CAAC;AACjD,IAAA,KAAK,IAAI,QAAQ,CAAC,KAAK,GAAG,KAAK,IAAI,IAAI,CAAC;;AAGxC,IAAA,MAAM,WAAW,GAAG,MAAM,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE,CAAC;IACzD,IAAI,CAAC,WAAW,EAAE;QAChB,OAAO,GAAG,CAAC,IAAI,CAAC;AACd,YAAA,OAAO,EAAE,KAAK;AACd,YAAA,OAAO,EAAE,2BAA2B;AACrC,SAAA,CAAC,CAAC;KACJ;;AAGD,IAAA,MAAM,eAAe,GAAG,MAAM,WAAW,CAAC,eAAe,EAAE,CAAC;AAC5D,IAAA,MAAM,0BAA0B,GAAG,MAAM,eAAe,CAAC,gBAAgB,EAAE,CAAC;;AAG5E,IAAA,MAAM,QAAQ,GAAG,0BAA0B,CAAC,MAAM,EAAE,CAAC;AAErD,IAAA,GAAG,CAAC,OAAO,CAAC,IAAI,GAAG,QAAQ,CAAC;IAE5B,OAAO,GAAG,CAAC,IAAI,CAAC;AACd,QAAA,OAAO,EAAE,IAAI;AACb,QAAA,OAAO,EAAE,cAAc;AACvB,QAAA,IAAI,EAAE,QAAQ;AACf,KAAA,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,GAAY,EAAE,GAAa,KAAI;AAC1D,IAAA,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;AAEnC,IAAA,IAAI,mBAAmB,GAAG,MAAM,OAAO,CAAC,GAAG,CACzC,QAAQ,CAAC,GAAG,CAAC,OAAO,IAAI,KAAI;AAC1B,QAAA,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;AACrD,QAAA,MAAM,0BAA0B,GAC9B,MAAM,eAAe,CAAC,gBAAgB,EAAE,CAAC;AAC3C,QAAA,OAAO,0BAA0B,CAAC;KACnC,CAAC,CACH,CAAC;IAEF,IAAI,YAAY,GAAG,mBAAmB,CAAC,GAAG,CAAC,CAAC,IAAI,KAAI;AAClD,QAAA,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC;AACvB,KAAC,CAAC,CAAC;IAEH,OAAO,GAAG,CAAC,IAAI,CAAC;AACd,QAAA,OAAO,EAAE,IAAI;AACb,QAAA,OAAO,EAAE,qBAAqB;AAC9B,QAAA,KAAK,EAAE,YAAY;AACpB,KAAA,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,GAAY,EAAE,GAAa,KAAI;IACxD,MAAM,IAAI,GAAiB,MAAM,IAAI,CAAC,QAAQ,CAC5C,GAAG,CAAC,MAAM,CAAC,EAAE,IAAI,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CACvC,CAAC;IACF,IAAI,CAAC,IAAI,EAAE;QACT,OAAO,GAAG,CAAC,IAAI,CAAC;AACd,YAAA,OAAO,EAAE,KAAK;AACd,YAAA,OAAO,EAAE,gBAAgB;AAC1B,SAAA,CAAC,CAAC;KACJ;AAED,IAAA,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;AACrD,IAAA,MAAM,0BAA0B,GAAG,MAAM,eAAe,CAAC,gBAAgB,EAAE,CAAC;AAC5E,IAAA,MAAM,QAAQ,GAAG,0BAA0B,CAAC,MAAM,EAAE,CAAC;IACrD,OAAO,GAAG,CAAC,IAAI,CAAC;AACd,QAAA,OAAO,EAAE,IAAI;AACb,QAAA,OAAO,EAAE,gBAAgB;AACzB,QAAA,IAAI,EAAE,QAAQ;AACf,KAAA,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,OAAO,GAAY,EAAE,GAAa,KAAI;IACvD,MAAM,MAAM,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;IACrC,IAAI,CAAC,MAAM,EAAE;QACX,OAAO,GAAG,CAAC,IAAI,CAAC;AACd,YAAA,OAAO,EAAE,KAAK;AACd,YAAA,OAAO,EAAE,oBAAoB;AAC9B,SAAA,CAAC,CAAC;KACJ;IAED,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IAE9C,IAAI,CAAC,SAAS,EAAE;QACd,OAAO,GAAG,CAAC,IAAI,CAAC;AACd,YAAA,OAAO,EAAE,KAAK;AACd,YAAA,OAAO,EAAE,gBAAgB;AAC1B,SAAA,CAAC,CAAC;KACJ;AAED,IAAA,MAAM,WAAW,GAAG,MAAM,SAAS,CAAC,SAAS,EAAE,CAAC;IAEhD,IAAI,CAAC,WAAW,EAAE;QAChB,OAAO,GAAG,CAAC,IAAI,CAAC;AACd,YAAA,OAAO,EAAE,KAAK;AACd,YAAA,OAAO,EAAE,6CAA6C;AACvD,SAAA,CAAC,CAAC;KACJ;IAED,OAAO,GAAG,CAAC,IAAI,CAAC;AACd,QAAA,OAAO,EAAE,IAAI;AACb,QAAA,OAAO,EAAE,oCAAoC;AAC9C,KAAA,CAAC,CAAC;AACL,CAAC,CAAC;;;;"}